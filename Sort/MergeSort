package sort;

import java.util.Arrays;

public class MergeSort {
    public static void main(String []args){
        int []arr = {9,8,7,6,5,4,3,2,1};
        sort(arr);
        System.out.println(Arrays.toString(arr));
    }
    public static void sort(int []arr){
        int []temp = new int[arr.length];//在排序前，先建好一个长度等于原数组长度的临时数组，避免递归中频繁开辟空间
        divide(arr,0,arr.length-1,temp);
    }

    private static void divide(int[] arr, int left, int right, int[] temp){
        if (left < right){
            int mid = (right+left)/2;
            divide(arr, left, mid, temp);
            divide(arr, mid+1, right, temp);
            merge2(arr, left, mid+1, right, temp);
        }

    }

    private static void merge(int[] arr,int left,int mid,int right,int[] temp){
        int i = left;//左序列指针
        int j = mid+1;//右序列指针
        int t = 0;//临时数组指针
        while (i<=mid && j<=right){
            if(arr[i]<=arr[j]){
                temp[t++] = arr[i++];
            }else {
                temp[t++] = arr[j++];
            }
        }
        while(i<=mid){//将左边剩余元素填充进temp中
            temp[t++] = arr[i++];
        }
        while(j<=right){//将右序列剩余元素填充进temp中
            temp[t++] = arr[j++];
        }
        t = 0;
        //将temp中的元素全部拷贝到原数组中
        while(left <= right){
            arr[left++] = temp[t++];
        }
    }

    private static void merge2(int[] arr,int left,int mid,int right,int[] temp){
        int leftEnd = mid-1;
        int t = left;
        int num = right-left +1;


        while (left <= leftEnd && mid <= right){
            if (arr[left] <= arr[mid]){
                temp[t++] = arr[left++];
            }else {
                temp[t++] = arr[mid++];
            }
        }

        while (left <= leftEnd){
            temp[t++] = arr[left++];
        }
        while (mid <= right){
            temp[t++] = arr[mid++];
        }
        for (int i =0;i<num;i++,right--){
            arr[right] = temp[right];
        }
    }
}
